import os

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

from services.DashboardService.DashboardService import DashboardService
from services.DashboardService.DashboardUtils import DashboardUtils


class DashboardView:

    def __init__(self):
        self.service = DashboardService()
        self.dashboardUtils = DashboardUtils()

    def create_intensity_chart(self):

        st.set_page_config(page_title='Dashboard - Treino', layout='wide')

        # this is the header

        t1, t2 = st.columns((0.07, 1))

        t1.image(os.path.join(os.path.dirname(os.path.abspath(__file__)), "../images/index.png"), width=120)
        t2.title("South Western Ambulance Service - Hospital Handover Report")
        t2.markdown(
            " **tel:** 01392 451192 **| website:** https://www.swast.nhs.uk **| email:** mailto:data.science@swast.nhs.uk")

        """Cria o gr√°fico de intensidade do treino e exibe no Streamlit."""
        col1, col2 = st.columns(2)




        with col1:
            st.subheader("Intensidade do Treino")
            # Obtendo os dados do servi√ßo
            df_filtrado, color_map = self.service.col1_intensidade_treino()


            # Verifica se h√° dados antes de criar o gr√°fico
            if df_filtrado.empty:
                st.warning("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")
                return

            # Gr√°fico de barras
            fig = px.bar(
                df_filtrado,
                x='Data',
                y='heart_rate_avg',
                color='cluster_category',
                color_discrete_map=color_map,
                labels={
                    'heart_rate_avg': 'Frequ√™ncia Card√≠aca M√©dia (bpm)',
                    'Data': 'Data do Treino',
                    'cluster_category': 'Intensidade do Treino'
                },
                category_orders={"cluster_category": ["Alta Intensidade", "Intensidade Moderada", "Baixa Intensidade"]}
            )

            st.plotly_chart(fig, use_container_width=True)





        with col2:
            st.subheader("Resumo Di√°rio")
            # Obtendo os dados do servi√ßo
            calorias, frequencia_media, frequencia_maxima, duracao_diaria, numero_exercicios = self.service.col2_resumo_diario()


            col_icon1, col_icon2 = st.columns(2)
            with col_icon1:
                st.metric("üíõ Freq. Card√≠aca M√©dia (bpm)", int(frequencia_media))
                st.metric("‚ù§Ô∏è Freq. Card√≠aca M√°xima (bpm)", int(frequencia_maxima))

            with col_icon2:
                st.metric("üî• Calorias Perdidas", int(calorias))
                st.metric("‚è±Ô∏è Dura√ß√£o Total (min)", int(duracao_diaria))
                st.metric("üèÉ N√∫mero de Exerc√≠cios", numero_exercicios)



        st.subheader("Indicador")

        # Obtendo os dados da classe Utils
        bio_data_filtrado, selected_month_Intensity, calorias_por_mes = self.service.col3_indicador()

        # Selecionar m√©trica para visualiza√ß√£o
        metric_options = ["Calorias", "Dura√ß√£o", "Frequ√™ncia Card√≠aca M√°xima", "Frequ√™ncia Card√≠aca M√©dia"]
        selected_metric = st.selectbox("Indicador:", metric_options)

        if selected_metric == "Calorias":

            # Criar um DataFrame para plotar todas as calorias queimadas
            calorias_por_mes = pd.DataFrame({
                "Data": bio_data_filtrado["Data"],
                "Calorias Queimadas": bio_data_filtrado["Calorias"]  # Supondo que a coluna se chama "Calorias"
            })

            # Plotar gr√°fico
            # Criar o gr√°fico de calorias queimadas
            fig_calorias = px.line(
                calorias_por_mes,
                x="Data",
                y="Calorias Queimadas",
                markers=True,
                title=f"Calorias Queimadas Mensais - {selected_month_Intensity}",
                labels={"Data": "Data", "Calorias Queimadas": "Calorias"},
            )

            # Atualizar o layout do gr√°fico
            fig_calorias.update_layout(
                xaxis_title="Data",
                yaxis_title="Calorias",
                template="plotly_dark",
                xaxis=dict(tickangle=45)
            )

            # Exibir o gr√°fico no Streamlit
            st.plotly_chart(fig_calorias, use_container_width=True)

        elif selected_metric == "Dura√ß√£o":
            # Criar um DataFrame para plotar todas as dura√ß√µes do treino
            duracoes_por_mes = pd.DataFrame({
                "Data": bio_data_filtrado["Data"],
                "Dura√ß√£o do Treino": bio_data_filtrado["Dura√ß√£o"]  # Supondo que a coluna se chama "Dura√ß√£o"
            })

            # Plotar gr√°fico
            # Criar o gr√°fico de dura√ß√µes do treino
            fig_duracao = px.line(
                duracoes_por_mes,
                x="Data",
                y="Dura√ß√£o do Treino",
                markers=True,
                title=f"Dura√ß√µes do Treino Mensais - {selected_month_Intensity}",
                labels={"Data": "Data", "Dura√ß√£o do Treino": "Dura√ß√£o (minutos)"},
                line_shape='linear'  # Forma da linha (pode ser ajustada conforme necess√°rio)
            )

            # Atualizar o layout do gr√°fico
            fig_duracao.update_layout(
                xaxis_title="Data",
                yaxis_title="Dura√ß√£o (minutos)",
                template="plotly_dark",
                xaxis=dict(tickangle=45)
            )

            # Exibir o gr√°fico no Streamlit
            st.plotly_chart(fig_duracao, use_container_width=True)

        elif selected_metric == "Frequ√™ncia Card√≠aca M√°xima":
            # Criar um DataFrame para plotar todas as frequ√™ncias card√≠acas
            frequencias_por_mes = pd.DataFrame({
                "Data": bio_data_filtrado["Data"],
                "Frequ√™ncia Card√≠aca": bio_data_filtrado["FC_Max"]
                # Supondo que a coluna se chama "Frequ√™ncia Card√≠aca"
            })

            # Criar o gr√°fico de frequ√™ncias card√≠acas
            fig_frequencia = px.line(
                frequencias_por_mes,
                x="Data",
                y="Frequ√™ncia Card√≠aca",
                markers=True,
                title=f"Frequ√™ncias Card√≠acas Mensais - {selected_month_Intensity}",
                labels={"Data": "Data", "Frequ√™ncia Card√≠aca": "Frequ√™ncia Card√≠aca (bpm)"},
            )

            # Atualizar o layout do gr√°fico
            fig_frequencia.update_layout(
                xaxis_title="Data",
                yaxis_title="Frequ√™ncia Card√≠aca (bpm)",
                template="plotly_dark",
                xaxis=dict(tickangle=45)
            )

            # Exibir o gr√°fico no Streamlit
            st.plotly_chart(fig_frequencia, use_container_width=True)

        else:
            # Criar um DataFrame para plotar todas as frequ√™ncias card√≠acas m√©dias
            frequencias_media_por_mes = pd.DataFrame({
                "Data": bio_data_filtrado["Data"],
                "Frequ√™ncia Card√≠aca M√©dia": bio_data_filtrado["FC_Media"]
                # Supondo que a coluna se chama "FC_Media"
            })

            # Criar o gr√°fico de frequ√™ncias card√≠acas m√©dias
            fig_frequencia_media = px.line(
                frequencias_media_por_mes,
                x="Data",
                y="Frequ√™ncia Card√≠aca M√©dia",
                markers=True,
                title=f"Frequ√™ncias Card√≠acas M√©dias Mensais - {selected_month_Intensity}",
                labels={"Data": "Data", "Frequ√™ncia Card√≠aca M√©dia": "Frequ√™ncia Card√≠aca (bpm)"},
            )

            # Atualizar o layout do gr√°fico
            fig_frequencia_media.update_layout(
                xaxis_title="Data",
                yaxis_title="Frequ√™ncia Card√≠aca (bpm)",
                template="plotly_dark",
                xaxis=dict(tickangle=45)
            )

            # Exibir o gr√°fico no Streamlit
            st.plotly_chart(fig_frequencia_media, use_container_width=True)


        st.subheader("Tabela de Exerc√≠cios por Categoria")
        with st.expander("Exerc√≠cios"):

            self.service.col4_exerc√≠cios_por_categoria()



